working principle of computer
input - process - output
input - raw data and information
output - expected outcome
process - write instructions to process input and generate output

program - set of instructions for performing particular task or to find solution to given problem
instructions - precise manner , step by step
		logical representation of the solution
		logic - right direction of thinking
solution - accuracy, efficiency

program 
communicates with hardware through operating system
program - OS - hardware
written in a programming language (high level lenguage )
simple structured English is used to represent logic of the program

language - medium of communication
	  vocab, grammer, style (ways of expressing)	
programmer (programming language ) - conversion - machine understandable language

represent input - process input - generate output - provide the output
write the program - provide the program for conversion - use the program
source code - compilation -      interpretation - execution
prg1.java   -   .class files - 
conversion 
compilation - bytecode - machine independent
interpretation - executable code - machine dependent

concepts 
general programming 
Object Oriented programming
JAVA programming

general programming concepts
1. sequential execution => all the statements written in a program are executed in the same sequence they are written
2. selection
3. iteration

first java program
* a line of code in java is called as a statement
*as many classes you write in a source code file (.java) that many .class files (byte code) will be generated after compilation. 
*a class among these which contains the method   
	public static void main(String[] args) {}
is used for launching the program.
* JAVA is case sensitive language.
* each statement should end with a semicolon (syntax)
*each statment is written in a block { } in a method and method is written in a class. (rule)
* use indentation for readability. (convention)
* classname in java generally starts with capital letter (convention)
* predefined class_names in java starts with capital letter

* program has to follow rules and syntax (grammer). conventions are also to be followed for better programming practices.


class Demo
{
	public static void main(String [] args)
	{
		System.out.println("Welcome to JAVA");
	}
}
System.out.println () => used to display the output mentioned in () on the SOD (standard output device i.e. screen/monitor).

SID (standard input device i.e. keyboard)

create a folder to keep the java programs together as a group.
save the file as filename.java
compile javac filename.java
	if there are no mistakes in the source code, then the compiler generates that many .class files as many classes are written in the file

use any of the classes having main method in it for launching.

** keyword 
reserved words in a particular language that has specific meaning and serves specific purpose. e.g. => class, publi, void, if, do 

** variable - name of memory location. it holds some value, which can be cahnged at execution
e.g. => x=5 age=20  name="Harry"
3 steps to use variables
declare, initialize, use
rule - variable should be initialized before use

** identifier
name given to variable, method, class
rules =>
valid characters  a-z A-Z 0-9 _ $ 
should not start with digit
it should not be JAVA keyword
case sensitive
no length restrictions => preferable 8-15 characters, meaningful, useful
convention
user defined classname starts with capital letter => class Demo
variable 
single word - lowercase => age name
multiword - each inner word starts with capital letter (camel case)
studentname => studentName studentprojecttitle => studentProjectTitle 

** datatypes
it tells which type of value can be stored
how much memory it occupies
range of values that can be stored

primitive => 
character - char
logical - boolean
numeric - 
whole numbers- byte, short, int, long
fractional numbers - float, double
non primitive => 
array
predefined class - String
user defined class - Student 

block
{
}

datatypes
tells about type of value stored, range of value that can be stored, memory occupied for a variable

categories
primitive, basic data types
numeric, character, boolean
data type  type of value value range 	memory occupied 
boolean    logical       true/false	1 bit		boolean s=true;
example 
declaration => datatype variablename; => boolean status;
initialize => variablename=value; => status=true;
declaration with initialization => datatype variablename=value; => boolean check=false;
combination => booelan status,check,remark=true;

use => System.out.println(status);

char	character	printable single character	1 byte

char ch='A';

numeric default value for all numeric datatypes is zero
byte   	whole numbers 2^^7 to (2^^7)-1  -128 to 127  1 byte byte b=120;
short 	whole numbers 2^^15 -32768 to 32767 2 bytes short s=30000;
int   	whole numbers 2^^31
long  	whole numbers 2^^63  long lv=7788665599L;
float 	fractional numbers float fl=3.142f; upto 6 decimal places
double 	fractional numbers double dl=3.3333333333333; upto 15 decimal places


operators 
binary operatiors works on 2 operands
operand1 operator operand2
4 + 5, x - 7, y * z
arithmetic operators (binary)
numeric operands => numeric result
operation	symbol	example	result/answer
addition 	+	4 + 5	9
subtraction 	-	10-3	7
multiplication	*	2*10	20
division 	/	6/3	2
remainder	%	5%2	1

x+y-3*5/r

comparison operators / relational operators (binary)

operation		symbol	example 	result
equality		==	x==5		boolean
less than		<	y<8		boolean
greater than		>	9>4		true
lessthan or equal to 	<=	7<=7		true
greater than or equal to >=	200>=370	false
not equal to 		!=	9!=9		false

x<y<z => not supported

logical operators 
exp1/con1 operators exp2/con2 => boolean
and (binary)
and &&	exp1 && exp2  	x>6 && y<10
exp1 	exp2 	result
true 	true	true
true	false	false
false	true	false
false	false	false
if first condition is evaluated to true only then second condition is checked

or (binary)	||	exp1 || exp2	x<0 || x==0
exp1	exp2	result
true	true	true
true	false	true
false	true	true
false	false	false
if first condition is evaluated to false only then second condition is evaluated

not (unary)
exp1 	result
!true	false
!false	true

assignment operators LHS variable RHS value/var/exp;
equal to = var=value
shorthand assignment operators
+= x+=5 => x=x+5;
-= y-=x	=> y=y-x;
*= x*=10 => x=x*10;
/= x/=y => x=x/y;
%= p%=q => p=p%q;


increment  (unary)
++x prefix before using the var the value will be incremented
x=3 y=++x => x=x+1 y=x => x=4 y=4

x++ postfix after using the var the value is incremented
x=3 y=x++ => y=x x=x+1 => x=4 y=3


decrement (unary)
--x prefix before using the var the value will be incremented
x=3 y=--x => x=x-1 y=x => x=2 y=2

x-- postfix after using the var the value is incremented
x=3 y=x-- => y=x x=x-1 => x=2 y=3

type conversion
int x=100,y; short s=200,t;
smaller to bigger conversion takes place implicitly without loss of data
y=s; => y=200

bigger to smaller conversion has to be specified explicitly 
	if the value is in the range of smaller datatype then conversion will be without loss of data
t=(short)x; => t=200
	if the value is out of range of smaller datatype then conversion will be with loss of data
int x=200000;short t;
t=(short)x; => t=value t will take is with loss of data 




